<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.swyp.saratang.mapper.UserMapper">
	

  	<select id="findBySocialId" parameterType="map" resultType="com.swyp.saratang.model.UserDTO">
        SELECT * FROM users 
        WHERE social_id = #{socialId} 
        AND auth_provider = #{authProvider}
    </select>
	
	<select id="findByEmail" parameterType="string" resultType="com.swyp.saratang.model.UserDTO">
    SELECT * FROM users WHERE email = #{email}
    and is_active=true
	</select>
	
	<select id="findById" parameterType="int" resultType="com.swyp.saratang.model.UserDTO">
	    SELECT * FROM users WHERE id = #{id}
	</select>
	
	<select id="findSafeById" parameterType="int" resultType="com.swyp.saratang.model.SafeUserDTO">
	    SELECT * FROM users WHERE id = #{id}
	</select>

    <!-- 정식 회원 등록 -->
	<insert id="insertUser">
   		 INSERT INTO users (social_id, auth_provider, email, nickname, email_verified, username, is_active,regdate)
    		VALUES (#{socialId}, #{authProvider}, #{email}, #{nickname}, #{emailVerified}, #{username}, true, NOW())
	</insert>
	
	<update id="newUserProfile">
        UPDATE users
        SET username = #{username},
            weight = #{weight}, 
            height = #{height}, 
            top_size = #{topSize}, 
            bottom_size = #{bottomSize}, 
            foot_size = #{footSize}, 
            is_active = true,
            role= 'regular',
            bio = #{bio},
            birth_date = #{birthDate},
            gender=#{gender},
            is_active = true,
            profile_yn = true
        WHERE social_id = #{socialId} AND auth_provider = #{authProvider}
    </update>
	
	<update id="editUserProfile">
        UPDATE users
        SET nickname = #{nickname},
            weight = #{weight}, 
            height = #{height}, 
            top_size = #{topSize}, 
            bottom_size = #{bottomSize}, 
            foot_size = #{footSize}
        WHERE id = #{id}
    </update>
	
	
	<update id="deleteUser">
    UPDATE users
	SET 
    is_active = 0,
    email = CONCAT('Delete_', email, '_', DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')), 
    social_id = CONCAT('Delete_', social_id, '_', DATE_FORMAT(NOW(), '%Y%m%d%H%i%s'))
	WHERE social_id = #{socialId} 
	AND auth_provider = #{authProvider}
    </update>
    
    
    
    
    
       <!-- 특정 사용자 크레딧 내역 조회 -->
    <select id="getCreditHistoryByUserId" resultType="com.swyp.saratang.model.PointDTO">
        SELECT * FROM credits WHERE user_id = #{userId} ORDER BY regdate DESC;
    </select>

    <!-- 특정 사용자의 총 크레딧 합계 조회 -->
    <select id="getTotalCreditsByUserId" resultType="Integer">
        SELECT COALESCE(SUM(credits), 0) FROM credits WHERE user_id = #{userId};
    </select>
    
     <!-- 닉네임 색상 변경 -->
    <update id="changeUserColor">
        UPDATE users SET color = #{newNicknameColor} WHERE id = #{userId};
    </update>
    
    
    
    <update id="updateUserIcon">
        UPDATE users 
        SET icon = #{iconId}
        WHERE id = #{userId}
    </update>

    <!-- 크레딧 내역 추가 -->
    <insert id="insertCreditHistory">
        INSERT INTO credits (user_id, type, credits, description)
        VALUES (#{userId}, #{type}, #{credits}, #{description});
    </insert>
    
    <select id="getUserColorsByUserId" resultType="com.swyp.saratang.model.UserColorDTO">
        SELECT 
            uc.colorid, 
            c.color AS colorName,
            uc.userid
        FROM usernamecolors uc
        JOIN colors c ON uc.colorid = c.id
        WHERE uc.userid = #{userId}
   </select>
	
	<select id="getAllColors" resultType="com.swyp.saratang.model.UserColorDTO">
        SELECT 
            id as colorId, 
           color AS colorName
        FROM colors
        WHERE id != 1
   </select>
   
   <select id="getCurrentColorByUserId" resultType="com.swyp.saratang.model.UserColorDTO">
       SELECT 
            c.id as colorId, 
            c.color AS colorName,
            u.id as userID
        FROM users u
        JOIN colors c ON u.color = c.id
        WHERE u.id = #{userId}
   </select>
	
	
	 <!-- 닉네임 색상 변경 -->
    <update id="updateUserColor">
        UPDATE users SET color = #{colorId} WHERE id = #{userId}
    </update>

    <!-- 닉네임 색상 구매 -->
    <insert id="insertUserColor">
        INSERT INTO usernamecolors (userid, colorid) VALUES (#{userId}, #{colorId})
    </insert>

    <!-- 사용자가 특정 색상을 보유하고 있는지 확인 -->
    <select id="countUserColor" resultType="int">
        SELECT COUNT(*) FROM usernamecolors WHERE userid = #{userId} AND colorid = #{colorId}
    </select>
    
    
</mapper>