<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.swyp.saratang.mapper.BoardMapper">
	
	<!--최신순 조회 쿼리-->
	<select id="getFashionListLatest" parameterType="com.swyp.saratang.data.RequestList" resultType="com.swyp.saratang.model.BoardDTO">
		SELECT 
	        p.ID, p.USER_ID,p.CATEGORY_ID,p.CONCERN_KEYWORD_ID,p.POST_TYPE,p.BRAND,p.ORIGINAL_PRICE,
	        p.DISCOUNT_PRICE,p.PRODUCT_LINK,p.TITLE,p.CURRENT_PRICE,p.MEMO,p.IS_SPEC_PUBLIC,p.DETAIL_MEMO,p.REGDATE
	    FROM posts p
	    JOIN user_categories uc ON p.CATEGORY_ID = uc.category_id
	    WHERE p.POST_TYPE = #{postType}
	      AND uc.user_id = #{requestUserId}
	      AND p.ID NOT IN (
	          SELECT j.post_id FROM judgements j 
	          WHERE j.user_id = #{requestUserId}
	      )
	    ORDER BY p.REGDATE DESC
	    LIMIT #{limitSize} <!-- 요청된 개수만큼 반환 -->
	</select>
	
	<!--인기순 조회 쿼리-->
	<select id="getFashionListPopular" parameterType="com.swyp.saratang.data.RequestList" resultType="com.swyp.saratang.model.BoardDTO">
	    SELECT 
	        p.ID, p.USER_ID, p.CATEGORY_ID, p.CONCERN_KEYWORD_ID, p.POST_TYPE, 
	        p.BRAND, p.ORIGINAL_PRICE, p.DISCOUNT_PRICE, p.PRODUCT_LINK, p.TITLE, 
	        p.CURRENT_PRICE, p.MEMO, p.IS_SPEC_PUBLIC, p.DETAIL_MEMO, p.REGDATE,
	        COALESCE(j.judgement_count, 0) AS popularity  <!-- 판단 횟수를 popularity로 표시 -->
	    FROM posts p
	    JOIN user_categories uc ON p.CATEGORY_ID = uc.category_id  <!-- 관심 카테고리 필터링 -->
	    LEFT JOIN (  <!-- 게시글별 판단 횟수 집계 -->
	        SELECT post_id, COUNT(*) AS judgement_count
	        FROM judgements
	        GROUP BY post_id
	    ) j ON p.ID = j.post_id
	    WHERE p.POST_TYPE = #{postType}
	      AND uc.user_id = #{requestUserId}  <!-- 요청 유저의 관심 카테고리에 해당하는 게시글만 -->
	      AND p.ID NOT IN (  <!-- 유저가 이미 판단한 게시글 제외 -->
	          SELECT j.post_id FROM judgements j 
	          WHERE j.user_id = #{requestUserId}
	      )
	    ORDER BY popularity DESC, p.REGDATE DESC  <!-- 판단 횟수 기준 내림차순 + 최신순 정렬 -->
	    LIMIT #{limitSize}  <!-- 요청된 개수만큼 반환 -->
	</select>
	
	<!--랜덤 조회 쿼리-->
	<select id="getFashionListRandom" parameterType="com.swyp.saratang.data.RequestList" resultType="com.swyp.saratang.model.BoardDTO">
		SELECT 
	        p.ID, p.USER_ID,p.CATEGORY_ID,p.CONCERN_KEYWORD_ID,p.POST_TYPE,p.BRAND,p.ORIGINAL_PRICE,
	        p.DISCOUNT_PRICE,p.PRODUCT_LINK,p.TITLE,p.CURRENT_PRICE,p.MEMO,p.IS_SPEC_PUBLIC,p.DETAIL_MEMO,p.REGDATE
	    FROM posts p
	    JOIN user_categories uc ON p.CATEGORY_ID = uc.category_id
	    WHERE p.POST_TYPE = #{postType}
	      AND uc.user_id = #{requestUserId}
	      AND p.ID NOT IN (
	          SELECT j.post_id FROM judgements j 
	          WHERE j.user_id = #{requestUserId}
	      )
	    ORDER BY RAND()
	    LIMIT #{limitSize}	<!-- 요청된 개수만큼 반환 -->
	</select>

    <!-- 패션정보 리스트 조회(페이징) -->
	<select id="getFashionListPaging" parameterType="com.swyp.saratang.data.RequestList" resultType="com.swyp.saratang.model.BoardDTO">
	    SELECT 
	        p.ID, 
	        p.USER_ID,
	        p.CATEGORY_ID,
	        p.CONCERN_KEYWORD_ID,
	        p.POST_TYPE,
	        p.BRAND,
	        p.ORIGINAL_PRICE,
	        p.DISCOUNT_PRICE,
	        p.PRODUCT_LINK,
	        p.TITLE,
	        p.CURRENT_PRICE,
	        p.MEMO,
	        p.IS_SPEC_PUBLIC,
	        p.DETAIL_MEMO,
	        p.REGDATE
	    FROM posts p
	    JOIN user_categories uc ON p.CATEGORY_ID = uc.category_id  <!-- 관심 카테고리 조인 -->
	    WHERE p.POST_TYPE = #{postType}
	      AND uc.user_id = #{requestUserId}  <!-- 요청한 유저의 관심 카테고리만 필터링 -->
	      AND p.ID NOT IN (  <!-- 이미 판단한 게시글 제외 -->
	          SELECT j.post_id FROM judgements j 
	          WHERE j.user_id = #{requestUserId}
	      )
	    ORDER BY p.REGDATE DESC  <!-- 최신순 정렬 -->
	    LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}
	</select>
	<!-- 리스트 조회 페이징시 total 개수 받아오기 -->
	<select id="getBoardListCount" resultType="int">
		SELECT COUNT(*) AS CNT
		  FROM posts
	</select>

        <!-- 패션정보 리스트 상세 조회 -->
    <select id="getFashionPostById" resultType="com.swyp.saratang.model.BoardDTO">
    	SELECT 
	    	ID, 
			USER_ID,
			CATEGORY_ID,
			CONCERN_KEYWORD_ID,
			POST_TYPE,
			BRAND,
			ORIGINAL_PRICE,
			DISCOUNT_PRICE,
			PRODUCT_LINK,
			TITLE,
			CURRENT_PRICE,
			MEMO,
			IS_SPEC_PUBLIC,
			DETAIL_MEMO,
			REGDATE
		FROM posts
		WHERE ID = #{id} AND POST_TYPE = #{postType}
    </select>
    
    <!--사라/마라 판단한 게시글 히스토리(페이징)-->
	<select id="getHistory" parameterType="com.swyp.saratang.data.RequestList" resultType="com.swyp.saratang.model.BoardDTO">
		SELECT 
	        p.ID, p.USER_ID,p.CATEGORY_ID,p.CONCERN_KEYWORD_ID,p.POST_TYPE,p.BRAND,p.ORIGINAL_PRICE,
	        p.DISCOUNT_PRICE,p.PRODUCT_LINK,p.TITLE,p.CURRENT_PRICE,p.MEMO,p.IS_SPEC_PUBLIC,p.DETAIL_MEMO,p.REGDATE
	    FROM posts p
	    WHERE p.POST_TYPE = #{postType}
	      AND p.ID IN (
	          SELECT j.post_id FROM judgements j 
	          WHERE j.user_id = #{requestUserId} AND j.judgement = #{judgementType}
	      )
	    ORDER BY p.REGDATE ${sortType}
	    LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}
	</select>
	<!-- 사라/마라 판단한 게시글 히스토리 페이징시 total 개수 받아오기 -->
	<select id="getHistoryCount" parameterType="com.swyp.saratang.data.RequestList" resultType="int">
	    SELECT COUNT(*) AS CNT
	    FROM posts p
	    WHERE p.POST_TYPE = #{postType}
	    AND p.ID IN (
	        SELECT j.post_id 
	        FROM judgements j 
	        WHERE j.user_id = #{requestUserId} 
	        AND j.judgement = #{judgementType}
	    )
	</select>
	
	<!--기간별 패션 베스트 조회-->
	<select id="getFashionBest" parameterType="com.swyp.saratang.data.RequestList" resultType="com.swyp.saratang.model.BoardDTO">
	    SELECT 
	        p.ID, 
	        p.USER_ID,
	        p.CATEGORY_ID,
	        p.CONCERN_KEYWORD_ID,
	        p.POST_TYPE,
	        p.BRAND,
	        p.ORIGINAL_PRICE,
	        p.DISCOUNT_PRICE,
	        p.PRODUCT_LINK,
	        p.TITLE,
	        p.CURRENT_PRICE,
	        p.MEMO,
	        p.IS_SPEC_PUBLIC,
	        p.DETAIL_MEMO,
	        p.REGDATE,
	        COALESCE(j.judgement_count, 0) AS popularity  <!-- 판단 횟수를 popularity로 표시 -->
	    FROM posts p
	    JOIN user_categories uc ON p.CATEGORY_ID = uc.category_id  <!-- 관심 카테고리 조인 -->
	    LEFT JOIN (  <!-- 게시글별 판단 횟수 집계 -->
	        SELECT post_id, COUNT(*) AS judgement_count
	        FROM judgements
	        GROUP BY post_id
	    ) j ON p.ID = j.post_id
	    WHERE p.POST_TYPE = 'fashion'
	      AND uc.user_id = #{requestUserId}  <!-- 요청한 유저의 관심 카테고리만 필터링 -->
	      AND p.REGDATE >= DATE_SUB(CURDATE(), INTERVAL #{period} DAY) <!-- 기간별 정렬 -->
	    ORDER BY popularity DESC <!-- 정렬방식 판단 개수 많은 순으로 -->
	    LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}
	</select>
	<!-- 기간별 패션 베스트 조회 시 total 개수 구하는 쿼리 -->
	<select id="getFashionBestCount" parameterType="com.swyp.saratang.data.RequestList" resultType="int">
	    SELECT COUNT(*) AS CNT
	    FROM posts p
	    JOIN user_categories uc ON p.CATEGORY_ID = uc.category_id
	    LEFT JOIN (
	        SELECT post_id, COUNT(*) AS judgement_count
	        FROM judgements
	        GROUP BY post_id
	    ) j ON p.ID = j.post_id
	    WHERE p.POST_TYPE = 'fashion'
	      AND uc.user_id = #{requestUserId}
	      AND p.REGDATE >= DATE_SUB(CURDATE(), INTERVAL #{period} DAY)
	</select>
	
	<!--기간별 할인 베스트 조회(페이징)-->
	<select id="getDiscountBest" parameterType="com.swyp.saratang.data.RequestList" resultType="com.swyp.saratang.model.BoardDTO">
	    SELECT 
	        p.ID, 
	        p.USER_ID,
	        p.CATEGORY_ID,
	        p.CONCERN_KEYWORD_ID,
	        p.POST_TYPE,
	        p.BRAND,
	        p.ORIGINAL_PRICE,
	        p.DISCOUNT_PRICE,
	        p.PRODUCT_LINK,
	        p.TITLE,
	        p.CURRENT_PRICE,
	        p.MEMO,
	        p.IS_SPEC_PUBLIC,
	        p.DETAIL_MEMO,
	        p.REGDATE,
	        COALESCE(j.judgement_count, 0) AS popularity  <!-- 판단 횟수를 popularity로 표시 -->
	    FROM posts p
	    JOIN user_categories uc ON p.CATEGORY_ID = uc.category_id  <!-- 관심 카테고리 조인 -->
	    LEFT JOIN (  <!-- 게시글별 판단 횟수 집계 -->
	        SELECT post_id, COUNT(*) AS judgement_count
	        FROM judgements
	        WHERE judgement = 'positive'
	        GROUP BY post_id
	    ) j ON p.ID = j.post_id
	    WHERE p.POST_TYPE = 'discount'
	      AND uc.user_id = #{requestUserId}  <!-- 요청한 유저의 관심 카테고리만 필터링 -->
	      AND p.REGDATE >= DATE_SUB(CURDATE(), INTERVAL #{period} DAY) <!-- 기간별 정렬 -->
	    ORDER BY popularity DESC <!-- 정렬방식 사라판단 개수 많은 순으로 -->
	    LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}
	</select>
	<!-- 기간별 할인 베스트 조회 시 total 개수 구하는 쿼리 -->
	<select id="getDiscountBestCount" parameterType="com.swyp.saratang.data.RequestList" resultType="int">
	    SELECT COUNT(*) AS CNT
	    FROM posts p
	    JOIN user_categories uc ON p.CATEGORY_ID = uc.category_id
	    LEFT JOIN (
	        SELECT post_id, COUNT(*) AS judgement_count
	        FROM judgements
	        WHERE judgement = 'positive'
	        GROUP BY post_id
	    ) j ON p.ID = j.post_id
	    WHERE p.POST_TYPE = 'discount'
	      AND uc.user_id = #{requestUserId}
	      AND p.REGDATE >= DATE_SUB(CURDATE(), INTERVAL #{period} DAY)
	</select>
	
    <select id="getImagesByPostId" parameterType="Integer" resultType="String">
	    SELECT 
	    	image_url
	    FROM post_images
	    WHERE post_id = #{postId}
	</select>
	

	
	<!-- 이미지 url 삽입 -->
	<insert id="insertPostImage" parameterType="com.swyp.saratang.model.PostImageDTO">
	    INSERT INTO post_images 
	    	(post_id, image_url ,uploaded_at) 
	    VALUES 
	    	(#{postId}, #{imageUrl},NOW())
	</insert>
	
	<!-- 패션정보/할인정보 저장	 BoardMapper.java 에서 @insert로 쿼리 실행하므로 두번 실행되지 않도록 주석처리함   -->
<!--	<insert id="createFashionPost" parameterType="com.swyp.saratang.model.BoardDTO">
        INSERT INTO posts
	        (user_id,category_id,concern_keyword_id,post_type
	        ,brand,original_price,discount_price,product_link,title
	        ,current_price,is_spec_public,memo,detail_memo)
        VALUES
			(#{userId}, #{categoryId}, #{concernKeywordId}, #{post_type}, 
			#{brand}, #{originalPrice}, #{discountPrice}, #{productLink}, #{title}, 
			#{currentPrice}, #{isSpecPublic}, #{memo}, #{detailMemo})
	</insert>-->
	
	<!--댓글저장-->
	<insert id="insertComment" parameterType="com.swyp.saratang.model.CommentDTO">
		INSERT INTO comments
			(post_id,user_id,content)
	    VALUES 
	    	(#{postId}, #{userId},#{content})
	</insert>
	
	<!--댓글리스트조회-->
	<select id="getCommentList" resultType="com.swyp.saratang.model.CommentDTO">
		SELECT 
		    comments.id, 
		    comments.post_id, 
		    comments.user_id, 
		    users.username,
		    judgements.judgement,
		    comments.content, 
		    comments.regdate
		FROM 
		    comments
		JOIN users ON comments.user_id = users.id
		JOIN judgements ON comments.user_id = judgements.user_id AND comments.post_id= judgements.post_id
		
		WHERE 
		    comments.post_id = 1
		ORDER BY 
		    comments.regdate DESC  <!-- 최신순 정렬 -->
	    LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}
	</select>
	
	<!-- 댓글 조회 페이징 -->
	<select id="getCommentListCount" resultType="int">
		SELECT COUNT(*) AS CNT
		  FROM comments
	</select>

	<!-- url가져오기 -->
	<select id="getBoardById" parameterType="int" resultType="com.swyp.saratang.model.BoardDTO">
        SELECT id, product_link AS productLink
        FROM posts
        WHERE id = #{boardId}
    </select>
    
    <!-- 작성한 게시글들 조회(페이징) -->
	<select id="getMyPosts" parameterType="com.swyp.saratang.data.RequestList" resultType="com.swyp.saratang.model.BoardDTO">
	    SELECT 
	        p.ID, 
	        p.USER_ID,
	        p.CATEGORY_ID,
	        p.CONCERN_KEYWORD_ID,
	        p.POST_TYPE,
	        p.BRAND,
	        p.ORIGINAL_PRICE,
	        p.DISCOUNT_PRICE,
	        p.PRODUCT_LINK,
	        p.TITLE,
	        p.CURRENT_PRICE,
	        p.MEMO,
	        p.IS_SPEC_PUBLIC,
	        p.DETAIL_MEMO,
	        p.REGDATE
	    FROM posts p
	    WHERE p.USER_ID = #{requestUserId}
	    ORDER BY p.REGDATE DESC  <!-- 최신순 정렬 -->
	    LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}
	</select>
	<!-- 작성한 게시글들의 총 개수 조회 -->
	<select id="getMyPostsCount" parameterType="com.swyp.saratang.data.RequestList" resultType="int">
	    SELECT COUNT(*) AS CNT
	    FROM posts p
	    WHERE p.USER_ID = #{requestUserId}
	</select>

</mapper>